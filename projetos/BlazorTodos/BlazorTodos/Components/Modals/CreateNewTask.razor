@using BlazorTodos.Models
@rendermode InteractiveServer
@inject ITodoService TodoService
@inject NavigationManager navMan

<MudDialog Style="width: 800px; height: 800px;">
    <DialogContent>
        <MudText Typo="@Typo.h6" Color="@Color.Inherit" Align="@Align.Center"><MudIcon Icon="@Icons.Material.Filled.AddBox" />Adicionar nova Tarefa</MudText>
        <br />
        <br />
        <br />
        <MudForm Model="newTodo">
            <MudPaper class="pa-4" Elevation="5" Outlined="true">
                <MudTextField @bind-Value="newTodo.Title" Label="Título" RequiredError="É necessário ao menos o título"></MudTextField>
                <MudTextField @bind-Value="newTodo.Description" Lines="4" IconSize="Size.Small" InputMode="InputMode.text" Label="Descrição" RequiredError="É necessário ao menos o título"></MudTextField>
                @if (_HasEndline)
                {
                    <MudDatePicker Label="Deadline" @bind-Date="_date" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter" Editable="true" />

                }
                <MudCheckBox @bind-Value="isDone">Concluída</MudCheckBox><MudCheckBox @bind-Value="@_HasEndline">Add Deadline</MudCheckBox>
            </MudPaper>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="@Color.Success" OnClick="AddTodo" Variant="Variant.Filled">Enviar</MudButton>
        <MudButton Color="@Color.Error" OnClick="Cancel" Variant="Variant.Filled">Cancelar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    public IMudDialogInstance DialogInstance { get; set; }

    private bool _HasEndline;
    private bool isDone = false;
    Guid guid;
    private Todo newTodo = new Todo();
    private DateTime? _date = DateTime.Today;

    private string _errorMessage;

    public void Cancel()
    {
        DialogInstance.Close();
        navMan.NavigateTo("/");
    }

    private void AddTodo()
    {
        guid = Guid.NewGuid();
        newTodo.Id = guid.ToString();
        if (_HasEndline)
        {
            newTodo.EndLine = (DateTime)_date.Value.ToUniversalTime();
            newTodo.EndLine.ToUniversalTime();
        }
        else
        {
            newTodo.EndLine = DateTime.Today.ToUniversalTime();
        }

        newTodo.CreationDate = DateTime.UtcNow;
        try
        {
            newTodo.IsDone = isDone;
            TodoService.AddNewObject(newTodo);
            Cancel();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.InnerException.Message;
            Cancel();
        }
        
    }
}
